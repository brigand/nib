[{"path":"data/dom/$.js","category":"dom","name":"$","description":"Simple replacement for jQuery-like selectors in IE8+","types":"String[, HTMLElement] -> Array<HTMLElement>","function":"function $(sel, parent) {\n    var nodeList = (parent || document).querySelectorAll(sel),\n        slice = Array.prototype.slice;\n    return slice.call(nodeList);\n}","examples":"// Get the text from all <p> tags on a page\nvar allText = $(\"p\").map(function(el){\n    return el.textContent;\n}).join(\"\\n\\n\");\n\n// A function numbers links in a container\nvar numberLinks = function(container){\n    $(\"a\", container).forEach(function(el, index){\n        el.textContent += \" (\" + (index + 1) + \")\";\n    });\n};"},{"path":"data/format/leftPad.js","category":"format","name":"leftPad","description":"Pad a string with characters, e.g. for time formatting","types":"String[, count=2, s=\"0\"] -> String","function":"function leftPad(str, count, s){\n\tcount = count || 2;\n\ts = s || \"0\";\n\n\twhile (str.length < count) {\n\t\tstr = s + str;\n\t}\n\n\treturn str;\n}","examples":"// format a number of minutes\nleftPad(7) // => \"07\"\n\n// make a binary string at least 8 bits\nleftPad(\"010101\", 8); // => \"00010101\"\n\n// right justify a string with spaces\nleftPad(\"foo\", 10, \" \"); // => \"       foo\""},{"path":"data/http/GET.js","category":"http","name":"GET","description":"Get some text from a web server","types":"String, SuccessCallback[, ErrorCallback] -> Undefined","function":"function GET(url, successCallback, errorCallback) {\n    \"use strict\";\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function(){\n        if (xhr.readyState !== 4) {\n            return;\n        }\n\n        // if no error callback is supplied, assume the successHandler can handle it\n        if ((typeof errorCallback !== \"function\") || (xhr.status >= 200 && xhr.status < 300)) {\n            successCallback(xhr.responseText, xhr);\n        }\n        else {\n            errorCallback(xhr.responseText, xhr);\n        }\n    };\n    xhr.open(\"get\", url, true);\n    xhr.send();\n}","examples":"// Get a text file and log it to the console\nGET(\"foo.txt\", function(text){\n    console.log(text);\n});\n\n// Get a text file and log it to the console\n// if it's not found, log \"not found\"\nGET(\"foo.txt\", function(text){\n    console.log(text);\n}, function(errorText, xhr){\n    if (xhr.status === 404) {\n        console.warn(\"foo.txt was not found\");\n    }\n    else {\n        console.warn(errorText);\n    }\n});"},{"path":"data/http/objectToQueryString.js","category":"http","name":"objectToQueryString","description":"Convert an object into a query string\ne.g. {a: 1, b: [2, 3]} to \"a=1&b=2&b=3\"","types":"Object -> String","function":"function objectToQueryString(obj){\n    var pairs = [], \n        own = Object.prototype.hasOwnProperty, \n        toString = Object.prototype.toString;\n\n    for (var key in obj) {\n        if (!own.call(obj, key)) {\n            return;\n        }\n\n        var value = obj[key];\n\n        if (toString.call(value) === \"[object Array]\") {\n            value.forEach(function(x){\n                pairs.push([key, x]);\n            });\n        }\n        else {\n            pairs.push([key, value]);\n        }\n    }\n\n    return pairs.map(function(pair){\n        return encodeURIComponent(pair[0]) + \"=\" \n             + encodeURIComponent(pair[1]);\n    }).join(\"&\");\n}","examples":"// ask your server for cars of a specific description\nvar url = \"/cars?\" + objectToQueryString({type: \"fast\", color: \"red\"});\ndoAjaxyStuff(url);"}]